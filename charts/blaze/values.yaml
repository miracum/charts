# -- number of replicas. ⚠️ Blaze does not support running with multiple replicas.
replicaCount: 1

# @ignored
image:
  registry: ghcr.io
  repository: samply/blaze
  tag: 0.33.0@sha256:f239104ede15f2656f2b6798c21096bafbcfbe7aecbf64fe7dd7f152a9eabc3a
  pullPolicy: IfNotPresent

# -- set the server base URL. Evaluated as a template. Equivalent to setting the `BASE_URL` environment variable.
baseUrl: 'http://{{ include "blaze.fullname" . }}.{{ .Release.Namespace }}.svc:{{ .Values.service.port }}'

# -- whether referential integrity should be enforced. Equivalent to setting the `ENFORCE_REFERENTIAL_INTEGRITY` environment variable.
enforceReferentialIntegrity: true

# -- the log level to set. Equivalent to setting the `LOG_LEVEL` environment variable.
logLevel: "INFO"

# -- built-in terminology service <https://samply.github.io/blaze/terminology-service.html>
terminologyService:
  # -- enable built-in terminology service
  enabled: false
  loinc:
    # -- enable LOINC code system
    enabled: false
  sct:
    # -- enable SNOMED CT code system (requires releasePath to be set!)
    enabled: false
    # -- set releasePath to folder that provides SCT release
    releasePath: ""

# -- sets the value for the `JAVA_TOOL_OPTIONS` environment variable.
javaToolOptions: "-XX:-OmitStackTraceInFastThrow"

metrics:
  # -- Enable the export of Prometheus metrics
  enabled: true
  serviceMonitor:
    # -- if enabled, creates a ServiceMonitor instance for Prometheus Operator-based monitoring
    enabled: false
    # -- additional labels to apply to the ServiceMonitor object, e.g. `release: prometheus`
    additionalLabels: {}
    # namespace: monitoring
    # interval: 30s
    # scrapeTimeout: 10s

# -- image pull secrets used by the main deployment container
imagePullSecrets: []

# -- override the release name
nameOverride: ""

# -- override the full release name
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # -- whether to automount the SA token.
  automountServiceAccountToken: false

# -- annotations to set on the main deployment's pod
podAnnotations: {}

# -- the pod security context
podSecurityContext:
  runAsNonRoot: true
  fsGroup: 1001

# @ignored
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

service:
  # -- the type of service
  type: ClusterIP
  # -- the port for the main endpoint
  port: 8080
  # -- the port exposed on the service to access metrics on `/metrics`
  metricsPort: 8081

ingress:
  # -- create an Ingress for the application
  enabled: false
  # -- ingressClassName to use
  className: ""
  # -- extra annotations to apply to the Ingress resource
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- list of ingress hosts
  hosts:
    - host: blaze.127.0.0.1.nip.io
      paths:
        - path: /
          pathType: ImplementationSpecific
          portName: http
  # -- TLS configuration
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
# More information: <https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15>
resourcesPreset: "medium"

# -- configure the resource requests and limits
resources: {}
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# -- pod node selector
nodeSelector: {}

# -- pod tolerations
tolerations: []

# -- pod affinity
affinity: {}

networkPolicy:
  # -- Enable creation of NetworkPolicy resources
  enabled: false
  # -- When set to false, only pods with the correct client label will have network access to the ports blaze is
  # listening on. When true, blaze will accept connections from any source (with the correct destination port).
  allowExternal: true
  # -- Allow the pod to access any range of port and all destinations.
  allowExternalEgress: false
  # -- Labels to match to allow traffic from other namespaces
  ingressNSMatchLabels: {}
  # -- Pod labels to match to allow traffic from other namespaces
  ingressNSPodMatchLabels: {}
  # -- Add extra ingress rules to the NetworkPolicy
  # e.g:
  # extraIngress:
  #   - ports:
  #       - port: 1234
  #     from:
  #       - podSelector:
  #           - matchLabels:
  #               - role: frontend
  #       - podSelector:
  #           - matchExpressions:
  #               - key: role
  #                 operator: In
  #                 values:
  #                   - frontend
  extraIngress: []

  # -- policy access to the metrics endpoint
  metrics:
    allowExternal: true
    # -- Labels to match to allow traffic from other namespaces
    ingressNSMatchLabels: {}
    # -- Pod labels to match to allow traffic from other namespaces
    ingressNSPodMatchLabels: {}

# -- pod topology spread configuration
# see: <https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#api>
topologySpreadConstraints:
  []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: ScheduleAnyway
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/instance: vfps

# -- container security context applied to init containers and the Helm test pods
# @ignored
restrictedContainerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  privileged: false
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  seccompProfile:
    type: RuntimeDefault

# -- extra environment variables to set on the blaze server container
extraEnv: []

# -- extra environment variables to set on the blaze server container in dictionary form
envDict: {}

customSearchParameters:
  # -- a custom search parameter bundle <https://samply.github.io/blaze/deployment/environment-variables.html#db-search-param-bundle>
  bundle: ""
  existingConfigmap:
    # -- name of a config map containing a custom search parameter bundle file. <https://samply.github.io/blaze/deployment/environment-variables.html#db-search-param-bundle>
    name: ""
    # -- the key inside the config map referencing the custom search parameter bundle file.
    key: "custom-search-parameters.json"

# @ignored
curl:
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: 8.13.0@sha256:d43bdb28bae0be0998f3be83199bfb2b81e0a30b034b6d7586ce7e05de34c3fd

# -- configuration for the server persistence
persistence:
  # -- enable data persistence using PVC
  enabled: true
  # -- name of an existing PVC to use
  existingClaim: ""
  # -- PVC Storage Class for data volume
  # If defined, storageClassName: <storageClass>
  # If set to "-", storageClassName: "", which disables dynamic provisioning
  # If undefined (the default) or set to null, no storageClassName spec is
  #   set, choosing the default provisioner.
  storageClass: ""
  # -- PVC Access Mode for data volume
  accessModes:
    - ReadWriteOnce
  # -- PVC Storage Request for volume
  size: 8Gi
  # -- annotations for the PVC
  annotations: {}
  # -- labels for the PVC
  labels: {}
  # -- selector to match an existing Persistent Volume (this value is evaluated as a template)
  # selector:
  #   matchLabels:
  #     app: my-app
  selector: {}

# @ignored
readinessProbe:
  httpGet:
    path: /health
    port: http
  failureThreshold: 5
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# @ignored
livenessProbe:
  httpGet:
    path: /health
    port: http
  failureThreshold: 10
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 10

# @ignored
startupProbe:
  httpGet:
    path: /health
    port: http
  failureThreshold: 10
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 10

tests:
  automountServiceAccountToken: false
  # -- set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
  # More information: <https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15>
  resourcesPreset: "nano"
  # -- configure the test pods resource requests and limits
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
