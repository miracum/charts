apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "blaze.fullname" . }}
  labels:
    {{- include "blaze.labels" . | nindent 4 }}
    app.kubernetes.io/component: server
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" (dict "value" .Values.commonAnnotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "blaze.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: server
  serviceName: {{ include "blaze.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "blaze.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: server
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "blaze.serviceAccountName" $ }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - containerPort: 8080
              name: http
          {{- if .Values.metrics.enabled }}
            - containerPort: 8081
              name: http-metrics
          {{- end }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          startupProbe:
            {{- toYaml .Values.startupProbe | nindent 12 }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- else if ne .Values.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.resourcesPreset) | nindent 12 }}
          {{- end }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: {{ .Values.javaToolOptions | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            - name: ENFORCE_REFERENTIAL_INTEGRITY
              value: {{ .Values.enforceReferentialIntegrity | quote }}
            - name: BASE_URL
              value: {{ include "common.tplvalues.render" (dict "value" .Values.baseUrl "context" $) }}
            {{- if .Values.terminologyService.enabled }}
            - name: ENABLE_TERMINOLOGY_SERVICE
              value: "true"
            - name: ENABLE_TERMINOLOGY_LOINC
              value: {{ .Values.terminologyService.loinc.enabled | quote }}
            - name: ENABLE_TERMINOLOGY_SNOMED_CT
              value: {{ .Values.terminologyService.sct.enabled | quote }}
            - name: SNOMED_CT_RELEASE_PATH
              value: {{ .Values.terminologyService.sct.releasePath | quote }}
            {{- end }}
            {{- if or .Values.customSearchParameters.bundle .Values.customSearchParameters.existingConfigmap.name }}
            - name: DB_SEARCH_PARAM_BUNDLE
              value: "/app/custom-search-parameters.json"
            {{- end }}
            {{- if .Values.extraEnv }}
            {{- toYaml .Values.extraEnv | nindent 12 }}
            {{- end }}
            {{- with .Values.envDict }}
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /app/data
            - name: tmp-volume
              mountPath: /tmp
            {{- if or .Values.customSearchParameters.bundle .Values.customSearchParameters.existingConfigmap.name }}
            - name: custom-search-parameters
              mountPath: /app/custom-search-parameters.json
              subPath: {{ include "blaze.customSearchParameters.configMapKey" . }}
              readOnly: true
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: tmp-volume
          emptyDir: {}
        {{- if or .Values.customSearchParameters.bundle .Values.customSearchParameters.existingConfigmap.name }}
        - name: custom-search-parameters
          configMap:
            name: {{ include "blaze.customSearchParameters.configMapName" . }}
        {{- end }}
  {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ tpl .Values.persistence.existingClaim $ }}
  {{- else if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- with .Values.persistence.annotations  }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.persistence.labels  }}
        labels:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end }}
        {{- include "blaze.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) | nindent 8 }}
  {{- end }}
