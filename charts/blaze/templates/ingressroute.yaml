{{- if and .Values.frontend.enabled .Values.frontend.ingressRoute.enabled -}}
{{- if not .Values.ingress.enabled -}}
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: {{ include "blaze.fullname" . }}
spec:
  {{- with .Values.frontend.ingressRoute.entryPoints }}
  entryPoints:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  routes:
    # -- Backend
    - kind: Rule
      # -- matches based on the auth type for the blaze backend. This auth needs to be supplied via middleware.
      match: >-
        Host(`{{ .Values.frontend.ingressRoute.host }}`) &&
        PathPrefix(`/fhir`) &&
        HeadersRegexp(`Authorization`, `^{{ .Values.frontend.ingressRoute.backendAuthType }}`)
      services:
        - kind: Service
          name: {{ include "blaze.fullname" . }}
          port: http
      {{- with .Values.frontend.ingressRoute.middlewares.backend }}
      middlewares:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    # -- Frontend
    - kind: Rule
      match: >-
        Host(`{{ .Values.frontend.ingressRoute.host }}`) &&
        PathPrefix(`/fhir`)
      services:
        - kind: Service
          name: {{ include "blaze.fullname" . }}-frontend
          port: http
      {{- with .Values.frontend.ingressRoute.middlewares.frontend }}
      middlewares:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    # -- Metrics
    - kind: Rule
      match: >-
        Host(`{{ .Values.frontend.ingressRoute.host }}`) &&
        PathPrefix(`/metrics`)
      services:
        - kind: Service
          name: {{ include "blaze.fullname" . }}
          port: http-metrics
      {{- with .Values.frontend.ingressRoute.middlewares.metrics }}
      middlewares:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  tls:
    secretName: {{ .Values.frontend.ingressRoute.host }}-tls
    domains:
      - main: {{ .Values.frontend.ingressRoute.host }}
{{- end }}
{{- end }}
