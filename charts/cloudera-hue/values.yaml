replicaCount: 1

# @ignored
image:
  registry: docker.io
  repository: gethue/hue
  tag: 4.11.0@sha256:11b649636e685295d003a90e9688f291ed576a0c230cf56d60772dd1aa8d9033
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}

# @ignored
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 8888

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: hue.127.0.0.1.nip.io
      paths:
        - path: /
          pathType: ImplementationSpecific
          portName: http
  tls: []

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

metrics:
  serviceMonitor:
    # -- if enabled, creates a ServiceMonitor instance for Prometheus Operator-based monitoring
    enabled: false
    # -- additional labels to apply to the ServiceMonitor object, e.g. `release: prometheus`
    additionalLabels: {}
    # namespace: monitoring
    # interval: 30s
    # scrapeTimeout: 10s

nodeSelector: {}

tolerations: []

affinity: {}

livenessProbe:
  httpGet:
    path: /desktop/debug/is_alive
    port: http
  failureThreshold: 5
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

readinessProbe:
  httpGet:
    path: /desktop/debug/is_alive
    port: http
  failureThreshold: 5
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# @ignored
waitForDatabaseInitContainer:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 16.1.0-debian-11-r15@sha256:29e3dd0e7e7a740eabdbae6f82673507d180701a719bbdb6d6308a58cf723e64
    pullPolicy: IfNotPresent

# -- container security context applied to init containers and the Helm test pods
# @ignored
restrictedContainerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  privileged: false
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  seccompProfile:
    type: RuntimeDefault

# @ignored
postgresql:
  enabled: true
  auth:
    database: hue
  primary:
    containerSecurityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL

# @ignored
curl: # +doc-gen:ignore
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: 8.7.1@sha256:25d29daeb9b14b89e2fa8cc17c70e4b188bca1466086907c2d9a4b56b59d8e21

database:
  # -- database hostname of an external database. Only used if `postgresql.enabled` is set to `false`.
  host: "host.example.com"
  # -- port used to connect to the postgres DB
  port: 5432
  # -- name of the database inside. If postgresql.enabled=true, then postgresql.postgresqlDatabase is used
  name: "hue"
  # -- username used to connect to the DB.
  username: "postgres"
  # -- the database password. Only used if postgresql.enabled=false.
  password: "postgres"
  existingSecret:
    # -- name of an existing secret containing the password to the DB.
    name: ""
    # -- name of the key in `webApi.db.existingSecret` to use as the password to the DB.
    key: "postgresql-postgres-password"

# -- default hue config. Evaluated as a Helm template string. Mounted as `/usr/share/hue/desktop/conf/z-hue.ini`
hueConfig: |
  [desktop]
  enable_prometheus=true
  secret_key_script=echo ${DJANGO_SECRET_KEY}
  enable_hue_5=true
  app_blacklist=hbase,jobbrowser,oozie
  enable_connectors=true

  [[task_server]]
  enabled=false

  [[database]]
  engine=postgresql_psycopg2
  host={{ include "cloudera-hue.database.host" $ }}
  port={{ include "cloudera-hue.database.port" $ }}
  user={{ include "cloudera-hue.database.user" $ }}
  name={{ include "cloudera-hue.database.name" $ }}
  password_script=echo ${PGPASSWORD}

  [hadoop]
  [[hdfs_clusters]]
  [[[default]]]
  is_enabled=false
  fs_defaultfs=
  webhdfs_url=

# -- Allow extending the default hue config, e.g. per-environment. Evaluated as a Helm template string.
# Mounted as `/usr/share/hue/desktop/conf/zz-hue.ini`
extraHueConfig: ""

tests:
  # -- configure the test pods resource requests and limits
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
