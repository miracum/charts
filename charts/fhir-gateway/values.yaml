# Default values for fhir-gateway.
common:
  # metadata.annotations to apply to all deployments
  deploymentAnnotations: {}

tracing:
  # enables tracing for all supported components
  # by default, the components export traces in Jaeger format to `localhost:16686`
  enabled: false

# number of replicas. The application is well-suited to scale horizontally if required.
replicaCount: 1

# the container image for the fhir-gateway
image: # +doc-gen:ignore
  registry: ghcr.io
  repository: miracum/fhir-gateway
  tag: v3.12.13@sha256:deb71de76d7b472ce3151444468265a770d773e8fe7cea626971f698b21c8cf3
  pullPolicy: IfNotPresent

# image pull secrets for the pod
imagePullSecrets: []

# String to partially override fullname template (will maintain the release name)
nameOverride: ""

# String to fully override fullname template
fullnameOverride: ""

# annotations to apply to the pod
podAnnotations: {}

# pod security context
podSecurityContext:
  {}
  # fsGroup: 2000

# container security context
securityContext: # +doc-gen:ignore
  allowPrivilegeEscalation: false
  privileged: false
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  readOnlyRootFilesystem: true
  seccompProfile:
    type: RuntimeDefault

# configure the init container used to wait for postgres database connectivity
# used by the query module to wait for the OMOP database and the notify module
# to wait for its HA database - if `notify.ha.enabled=true`
waitForPostgresInitContainer:
  # image to use for the init container which waits until the database
  # is ready to accept connections
  image: # +doc-gen:ignore
    registry: docker.io
    repository: bitnami/postgresql
    tag: 16.2.0-debian-12-r10@sha256:feff5aed093bcb118bd98b168a21a92bd4e82cfd35f0b6cd0032e2e63a4488ec
    pullPolicy: IfNotPresent

# the service used to expose the FHIR GW REST endpoint
service: # +doc-gen:break
  type: ClusterIP
  port: 8080
  metricsPort: 8081

ingress:
  # if enabled, create an Ingress to expose the FHIR Gateway outside the cluster
  enabled: false
  # ingress annotations
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # ingressClassName field
  ingressClassName: ""
  # configure the hostname
  hosts:
    - host: chart-example.local
      paths: ["/"]
  # TLS config
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# node labels for pods assignment
# see: <<https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/>>
nodeSelector: {}

# tolerations for pods assignment
# see: <https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/>
tolerations: []

# affinity for pods assignment
# see: <https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity>
affinity: {}

# extra environment vars to set on the FHIR gateway container
extraEnv: []

# readiness probe
readinessProbe: # +doc-gen:ignore
  enabled: true
  httpGet:
    path: /readyz
    port: http
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# liveness probe
livenessProbe: # +doc-gen:ignore
  enabled: true
  httpGet:
    path: /livez
    port: http
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

metrics:
  serviceMonitor:
    # if enabled, creates a ServiceMonitor instance for Prometheus Operator-based monitoring
    enabled: false
    # additional labels for the ServiceMonitor resource, e.g. `release: prometheus`
    additionalLabels: {}
    # namespace: monitoring
    # interval: 30s
    # scrapeTimeout: 10s

sinks:
  postgres:
    # if enabled, writes all received FHIR resources to a Postgres DB
    # if `postgresql.enabled=true`, then a Postgres DB is started as part of this
    # installation. If `postgresql.enabled=false`, then `sinks.postgres.external.*` is used.
    enabled: true
    external:
      # host or server name
      host: ""
      # port
      port: "5432"
      # name of the database to connect to
      database: ""
      # username to authenticate as
      username: ""
      # password for the user
      password: ""
      # can be used to specify the name of an existing secret containing the PostgreSQL password.
      # An alternative to setting the password above.
      existingSecret: ""
      # the key inside the `existingSecret` containing the password.
      existingSecretKey: "postgresql-password"
  fhirServer:
    # if enabled, sends all received resources to the specified FHIR server
    enabled: false
    # URL of the FHIR server. Support for authentication is not implemented.
    url: ""

kafka:
  # if enabled, the FHIR Gateway will read resources from the specified Kafka topic `inputTopic`
  # and write them to `outputTopic`. Requires the Kafka cluster to be configured using <https://strimzi.io/>.
  enabled: false
  # the Kafka consumer group id. Evaluated as a template.
  groupId: '{{ include "fhir-gateway.fullname" . }}-gateway'
  # name of the Kafka topic to read resources from
  # DEPRECATED: use `kafka.inputTopics` (note the s) instead.
  inputTopic: fhir-raw
  # list of Kafka topics to read FHIR resources from
  inputTopics:
    - fhir-raw
  # name of the topic to write processed resources to
  outputTopic: fhir.post-gatway
  # either PLAINTEXT or SSL
  securityProtocol: PLAINTEXT
  # name of the Strimzi Kafka CRD this gateway should connect to. This is used to resolve the Kafka bootstrap service.
  strimziClusterName: "my-cluster"

# see <https://github.com/bitnami/charts/tree/master/bitnami/postgresql> for details
postgresql:
  # enabled the included Postgres DB
  # see <https://github.com/bitnami/charts/tree/master/bitnami/postgresql> for configuration options
  enabled: true
  auth:
    # name of the database to create
    # see: <https://github.com/bitnami/containers/tree/main/bitnami/postgresql#creating-a-database-on-first-run>
    database: "fhir_gateway"
    # Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    enablePostgresUser: true

loincConverter:
  # whether to enable the LOINC conversion and harmonization service
  enabled: true

  image: # +doc-gen:ignore
    registry: ghcr.io
    repository: miracum/loinc-conversion
    tag: v1.14.10@sha256:45705e91624a2c4d24e988e742870e07f9b9eb34dc16de7a876f58497b1dc846
    pullPolicy: IfNotPresent

  metrics:
    serviceMonitor:
      # if enabled, creates a ServiceMonitor instance for Prometheus Operator-based monitoring
      enabled: false
      # additional labels for the ServiceMonitor resource, e.g. `release: prometheus`
      additionalLabels: {}
      # namespace: monitoring
      # interval: 30s
      # scrapeTimeout: 10s

  # if necessary, the service can easily scale horizontally
  replicaCount: 1

  # credentials to use when pulling the image
  imagePullSecrets: []

  # annotations for the pod
  podAnnotations: {}

  # the pod security context
  podSecurityContext:
    {}
    # fsGroup: 2000

  # the container security context
  securityContext: # +doc-gen:ignore
    allowPrivilegeEscalation: false
    privileged: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    seccompProfile:
      type: RuntimeDefault

  # service to expose the application
  service: # +doc-gen:break
    type: ClusterIP
    port: 8080

  # resource limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # node labels for pods assignment
  # see: <<https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/>>
  nodeSelector: {}

  # tolerations for pods assignment
  # see: <https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/>
  tolerations: []

  # affinity for pods assignment
  # see: <https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity>
  affinity: {}

  # readiness probe
  readinessProbe: # +doc-gen:ignore
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # liveness probe
  livenessProbe: # +doc-gen:ignore
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # extra environment variables to set on the
  extraEnv: []

fhir-pseudonymizer:
  # whether to enable the FHIR Pseudonymizer - a thin, FHIR-native wrapper on top of gPAS an Vfps
  # with additional options for anonymization.
  # if this is set to false, then the FHIR gateway will not attempt to pseudonymize/anonymize
  # the resources.
  enabled: true
  service: # +doc-gen:ignore
    # sets the pseudonymizer's service port to a fixed one here to be able to use the value
    # within the fhir-gateway's templates.
    port: 8080
  vfps:
    nameOverride: gateway-vfps
    postgresql:
      # overrides the chart's postgres server name to avoid conflicts with the fhir-gateway's postgresql
      nameOverride: "vfps-postgres"

# @ignored
curl: # +doc-gen:ignore
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: 8.7.1@sha256:25d29daeb9b14b89e2fa8cc17c70e4b188bca1466086907c2d9a4b56b59d8e21

# container security context applied to init containers used by the query, list, and notify modules.
# also used by the Helm test job pods
restrictedContainerSecurityContext: # +doc-gen:ignore
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  privileged: false
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  seccompProfile:
    type: RuntimeDefault

tests:
  # configure the test pods resource requests and limits
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
