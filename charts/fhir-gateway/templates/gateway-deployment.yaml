apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fhir-gateway.fullname" . }}
  labels:
    {{- include "fhir-gateway.labels" . | nindent 4 }}
    app.kubernetes.io/component: fhir-gateway
  {{- with .Values.common.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "fhir-gateway.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: fhir-gateway
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "fhir-gateway.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: fhir-gateway
    spec:
      automountServiceAccountToken: false
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.sinks.postgres.enabled }}
      initContainers:
        - name: wait-for-db
          image: {{ include "fhir-gateway.waitforDB.image" . }}
          imagePullPolicy: {{ .Values.waitForPostgresInitContainer.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
          env:
            - name: PGHOST
              value: {{ include "fhir-gateway.postgresql.host" $ | quote }}
            - name: PGPORT
              value: {{ include "fhir-gateway.postgresql.port" $ | quote }}
            - name: PGUSER
              value: {{ include "fhir-gateway.postgresql.user" $ | quote }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready; do
                echo "Waiting for DB ${PGUSER}@${PGHOST}:${PGPORT} to be up";
                sleep 15;
              done;
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SERVICES_PSQL_ENABLED
              value: {{ .Values.sinks.postgres.enabled | quote }}
            {{- if .Values.sinks.postgres.enabled }}
            - name: SPRING_DATASOURCE_URL
              value: {{ include "fhir-gateway.sinks.postgresql.jdbcUrl" . }}
            - name: SPRING_DATASOURCE_USERNAME
              value: {{ include "fhir-gateway.postgresql.user" . }}
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "fhir-gateway.db-secret-name" . }}
                  key: {{ include "fhir-gateway.db-secret-key" . }}
            {{- else }}
            - name: SPRING_SQL_INIT_MODE
              value: "never"
            {{- end }}
            - name: SERVICES_PSEUDONYMIZER_ENABLED
              value: "{{ include "fhir-gateway.pseudonymizer.isEnabled" . }}"
            - name: SERVICES_PSEUDONYMIZER_URL
              value: "{{ include "fhir-gateway.pseudonymizer.baseUrl" . }}"
            - name: SERVICES_LOINC_CONVERSIONS_ENABLED
              value: {{ .Values.loincConverter.enabled | quote }}
            - name: SERVICES_LOINC_CONVERSIONS_URL
              value: "http://{{ include "fhir-gateway.fullname" . }}-loinc-converter:{{ .Values.loincConverter.service.port }}/api/v1"
            - name: SERVICES_FHIRSERVER_ENABLED
              value: {{ .Values.sinks.fhirServer.enabled | quote }}
            {{- if .Values.sinks.fhirServer.enabled -}}
            - name: SERVICES_FHIRSERVER_URL
              value: {{ .Values.sinks.fhirServer.url }}
            {{- end }}
            - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ADD_ADDITIONAL_PATHS
              value: "true"
            - name: MANAGEMENT_SERVER_PORT
              value: "8081"
            - name: OPENTRACING_JAEGER_ENABLED
              value: {{ .Values.tracing.enabled | quote }}
{{- if not .Values.tracing.enabled }}
            - name: JAEGER_SERVICE_NAME
              value: "fhir-gateway"
{{- end }}
{{- if and .Values.kafka.enabled .Values.kafka.strimziClusterName }}
            - name: SERVICES_KAFKA_ENABLED
              value: {{ .Values.kafka.enabled | quote }}
            - name: INPUT_TOPIC
              {{- if .Values.kafka.inputTopics }}
              value: {{ include "fhir-gateway.utils.joinListWithComma" .Values.kafka.inputTopics }}
              {{- else }}
              value: {{ .Values.kafka.inputTopic | quote }}
              {{- end }}
            - name: OUTPUT_TOPIC
              value: {{ .Values.kafka.outputTopic | quote }}
            - name: BOOTSTRAP_SERVERS
              value: {{ .Values.kafka.strimziClusterName }}-kafka-bootstrap:{{ (eq .Values.kafka.securityProtocol "SSL") | ternary "9093" "9092" }}
            - name: SECURITY_PROTOCOL
              value: {{ .Values.kafka.securityProtocol }}
            - name: SSL_KEY_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-kafka-user
                  key: user.password
            - name: SSL_TRUST_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kafka.strimziClusterName }}-cluster-ca-cert
                  key: ca.password
{{- end }}
{{- if .Values.extraEnv }}
{{ toYaml .Values.extraEnv | indent 12 }}
{{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: http-metrics
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
{{- if and .Values.kafka.enabled .Values.kafka.strimziClusterName }}
            - name: kafka-certs
              mountPath: "/opt/kafka-certs"
              readOnly: true
{{- end }}
      volumes:
        - name: tmp-volume
          emptyDir: {}
{{- if and .Values.kafka.enabled .Values.kafka.strimziClusterName }}
        - name: kafka-certs
          projected:
            sources:
            - secret:
                name: {{ .Values.kafka.strimziClusterName }}-cluster-ca-cert
                items:
                  - key: ca.crt
                    path: ca.crt
                  - key: ca.p12
                    path: ca.p12
            - secret:
                name: {{ include "fhir-gateway.fullname" . }}-kafka-user
                items:
                  - key: user.crt
                    path: user.crt
                  - key: user.p12
                    path: user.p12
                  - key: user.key
                    path: user.key
{{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
