# metadata.annotations to apply to the deployment
deploymentAnnotations: {}

# String to partially override fullname template (will maintain the release name)
nameOverride: ""

# String to fully override fullname template
fullnameOverride: ""

# the type of pseudonymization service to use. One of gPAS, Vfps, None
pseudonymizationService: gPAS

gpas:
  # the gPAS TTP FHIR Pseudonymizer base URL used to be used by the pseudonymization service.
  # it should look similar to this: `http://gpas:8080/ttp-fhir/fhir/`
  fhirUrl: ""
  # Version of gPAS used.
  # There were breaking changes to the FHIR API starting in 1.10.2,
  # so explicitly set this value to 1.10.2 if `gpas.fhirUrl` points to gPAS 1.10.2.
  version: "1.10.1"
  auth:
    basic:
      # whether the fhir-pseudonymizer needs to provide basic auth credentials to access
      # the gPAS FHIR API
      enabled: false
      # HTTP basic auth username
      username: ""
      # HTTP basic auth password
      password: ""
      # read the password from an existing secret from the `GPAS__AUTH__BASIC__PASSWORD` key
      existingSecret: ""

# container image
image: # +doc-gen:ignore
  registry: ghcr.io
  repository: miracum/fhir-pseudonymizer
  tag: v2.21.7@sha256:57dae9a580ae6edb51a9bd3e9519d7df73a2c9f89365376ba9547d964302adfb
  pullPolicy: IfNotPresent

metrics:
  serviceMonitor:
    # if enabled, creates a ServiceMonitor instance for Prometheus Operator-based monitoring
    enabled: false
    # additional labels for the ServiceMonitor resource, e.g. `release: prometheus`
    additionalLabels: {}
    # namespace: monitoring
    # interval: 30s
    # scrapeTimeout: 10s

auth:
  apiKey:
    # enable requiring an API key placed in the `x-api-key` header to
    # authenticate against the fhir-pseudonymizer's `/fhir/$de-pseudonymize`
    # endpoint.
    enabled: false
    # expected value for the key, aka "password"
    key: ""
    # name of an existing secret with an `APIKEY` key containing the expected password
    existingSecret: ""

# number of replicas. This components can also be easily scaled horizontally if necessary.
replicaCount: 1

# image pull secrets
imagePullSecrets: []

# pod annotations
podAnnotations: {}

# the pod security context
podSecurityContext:
  {}
  # fsGroup: 2000

# the container security context
securityContext: # +doc-gen:ignore
  allowPrivilegeEscalation: false
  privileged: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  seccompProfile:
    type: RuntimeDefault

# service to expose the fhir-pseudonymizer at
service: # +doc-gen:break
  type: ClusterIP
  port: 8080
  # port to expose metrics at under the `/metrics` path
  metricsPort: 8081

# configure the anonymization rules, see <https://github.com/miracum/fhir-pseudonymizer/blob/HEAD/src/FhirPseudonymizer/anonymization.yaml> for an example.
# this is evaluated as a template. Also see [README.md](README.md#pseudonymization) for configuring it within this values.yaml
anonymizationConfig: ""

# resource requests and limits
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

ingress:
  # create an Ingress for the application
  enabled: false
  # ingressClassName to use
  className: ""
  # extra annotations to apply to the Ingress resource
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # list of ingress hosts
  hosts:
    - host: fhir-pseudonymizer.127.0.0.1.nip.io
      paths:
        - path: /
          pathType: ImplementationSpecific
          portName: http
  # TLS configuration
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# node labels for pods assignment
# see: <<https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/>>
nodeSelector: {}

# tolerations for pods assignment
# see: <https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/>
tolerations: []

# affinity for pods assignment
# see: <https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity>
affinity: {}

# readiness probe
readinessProbe: # +doc-gen:ignore
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# liveness probe
livenessProbe: # +doc-gen:ignore
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# extra environment variables to apply to the container
extraEnv: []
# - name: UseSystemTextJsonFhirSerializer
#   value: "true"

# extra volumeMounts for the main fhir-pseudonymizer container
extraVolumeMounts: []

# extra volumes
extraVolumes: []

# pod topology spread configuration
# see: <https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#api>
topologySpreadConstraints:
  []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: ScheduleAnyway
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/name: fhir-pseudonymizer
  #       app.kubernetes.io/instance: fhir-pseudonymizer

podDisruptionBudget:
  # create a PodDisruptionBudget resource
  enabled: false
  # Minimum available instances; ignored if there is no PodDisruptionBudget
  minAvailable: 1
  # Maximum unavailable instances; ignored if there is no PodDisruptionBudget
  maxUnavailable: ""

autoscaling:
  # enable horizontal pod autoscaling
  enabled: false
  # minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.
  # It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is
  # enabled and at least one Object or External metric is configured.
  # Scaling is active as long as at least one metric value is available.
  minReplicas: 1
  # upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than `minReplicas`.
  maxReplicas: 5
  # target average CPU utilization (represented as a percentage of requested CPU)
  # over all the pods; if not specified the default autoscaling policy will be used.
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # whether to automount the SA token
  automountServiceAccountToken: false

# @ignored
curl: # +doc-gen:ignore
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: 8.7.1@sha256:25d29daeb9b14b89e2fa8cc17c70e4b188bca1466086907c2d9a4b56b59d8e21

# container security context applied to init containers and the Helm test pods
restrictedContainerSecurityContext: # +doc-gen:ignore
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  privileged: false
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  seccompProfile:
    type: RuntimeDefault

vfps:
  # set to `true` to enable the included vfps sub-chart and auto-configure the FHIR Pseudonymizer
  # to use it as the pseudonymization backend
  enabled: false

  service: # +doc-gen:ignore
    grpcPort: 8081

externalVfps:
  # the address of an external vfps service to use.
  # Use `dns:///example:8081` to enable dns-based round-robin client-side load-balancing.
  address: ""

tests:
  # configure the test pods resource requests and limits
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
