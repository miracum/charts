apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vfps.fullname" . }}
  labels:
    {{- include "vfps.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
  annotations:
    polaris.fairwinds.com/automountServiceAccountToken-exempt: "true"
    {{- with .Values.deploymentAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "vfps.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "vfps.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "vfps.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-db
          image: {{ include "vfps.waitForDatabaseInitContainerImage" . }}
          imagePullPolicy: {{ .Values.waitForDatabaseInitContainer.image.pullPolicy }}
          {{- with .Values.restrictedContainerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: PGHOST
              value: {{ include "vfps.database.host" $ }}
            - name: PGPORT
              value: {{ include "vfps.database.port" $ | quote }}
            - name: PGUSER
              value: {{ include "vfps.database.user" $ }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready; do
                echo "Waiting for DB ${PGUSER}@${PGHOST}:${PGPORT} to be up";
                sleep 15;
              done;
        {{ if .Values.migrationsJob.enabled }}
        - name: wait-for-migrations-job
          image: ghcr.io/groundnuty/k8s-wait-for:no-root-v2.0@sha256:a26d3d3f6e1c747dd812aba5eef3189d535d0b4e810506bac51f8209a58a0102
          args: ["job", "{{ include "vfps.migrationsJob.resourceName" . }}"]
          {{- with .Values.restrictedContainerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
      containers:
        - name: vfps
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 8081
              protocol: TCP
            - name: http-metrics
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /livez
              port: http
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- else if ne .Values.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.resourcesPreset) | nindent 12 }}
          {{- end }}
          env:
            - name: DOTNET_EnableDiagnostics
              value: "0"
            - name: ConnectionStrings__PostgreSQL
              value: {{ include "vfps.database.connection-string" . }}
            - name: PGUSER
              value: {{ include "vfps.database.user" . }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "vfps.database.db-secret-name" . }}
                  key: {{ include "vfps.database.db-secret-key" . }}
            {{- if .Values.extraEnv }}
            {{- toYaml .Values.extraEnv | nindent 12 }}
            {{- end }}
          {{- if .Values.appsettings }}
          volumeMounts:
            - name: appsettings
              mountPath: /opt/vfps/appsettings.Production.json
              readOnly: true
              subPath: appsettings.Production.json
          {{- end }}
      volumes:
        - name: appsettings
          configMap:
            name: {{ include "vfps.fullname" . }}-appsettings
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
